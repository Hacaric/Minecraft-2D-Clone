# Generated by ChatGPT - refactored Perlin noise (2D) to use get(x, y, seed)

import numpy as np

def fade(t):
    return 6 * t**5 - 15 * t**4 + 10 * t**3

def lerp(a, b, t):
    return a + t * (b - a)

def grad(hash, x, y):
    h = hash & 3
    u = x if h & 1 == 0 else -x
    v = y if h & 2 == 0 else -y
    return u + v

def hash_coords(xi, yi, seed):
    """Hash function to generate pseudorandom gradients."""
    return (np.sin((xi * 1836311903 ^ yi * 2971215073 ^ seed * 4807526976) & 0xffffffff) * 43758.5453) % 4

def get(x, y, seed=0):
    """Returns Perlin noise value at float coordinates (x, y) with a given seed."""

    """PLEASE DONT EDIT THIS, IF X AND Y ARE NOT FRATIONAL NUMBERS, THE NOISE WILL BE BROKEN"""
    x = x/1.001 + 1000
    y = y/1.001 + 1000
    # Find unit grid cell containing point
    xi = int(np.floor(x))
    yi = int(np.floor(y))

    # Relative x, y within the cell
    xf = x - xi
    yf = y - yi

    # Fade curves
    u = fade(xf)
    v = fade(yf)

    # Hash gradients at each corner
    aa = int(hash_coords(xi,     yi,     seed))
    ab = int(hash_coords(xi,     yi + 1, seed))
    ba = int(hash_coords(xi + 1, yi,     seed))
    bb = int(hash_coords(xi + 1, yi + 1, seed))

    # Gradient dot products
    x1 = lerp(grad(aa, xf,     yf),     grad(ba, xf - 1, yf),     u)
    x2 = lerp(grad(ab, xf,     yf - 1), grad(bb, xf - 1, yf - 1), u)
    value = lerp(x1, x2, v)

    return value/2 + 0.5  # Normalize to [0, 1]

if __name__ == "__main__":
    import matplotlib.pyplot as plt
    import numpy as np
    seed = 43
    def is_empty(num):
        num = num / 2 + 0.5
        low_ = 0.45
        high_ = 0.6
        if num < 0.1:
            return 0.5
        elif num < high_ and num > low_:
            return 1
        return 0

    Z = np.zeros((100, 100))
    for i in range(100):
        for j in range(100):
            Z[i][j] = is_empty(get(i/10, j/10, seed=seed)-get(i/5, j/5, seed=seed)*0.2) # Adjust the scale and seed as needed
    # Normalize the values to be between 0 and 1

    # Plot the results
    plt.imshow(Z, extent=(0, 5, 0, 5), origin='lower', cmap='gray')
    plt.colorbar()
    plt.title("Perlin Noise")
    plt.show()
    # Test the get function